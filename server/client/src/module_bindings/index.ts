// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { Connect } from "./connect_reducer.ts";
export { Connect };
import { Disconnect } from "./disconnect_reducer.ts";
export { Disconnect };
import { UpdatePlayerAnimationState } from "./update_player_animation_state_reducer.ts";
export { UpdatePlayerAnimationState };
import { UpdatePlayerMovement } from "./update_player_movement_reducer.ts";
export { UpdatePlayerMovement };
import { UpdatePlayerRotation } from "./update_player_rotation_reducer.ts";
export { UpdatePlayerRotation };
import { UpdatePlayerScheduled } from "./update_player_scheduled_reducer.ts";
export { UpdatePlayerScheduled };

// Import and reexport all table handle types
import { LoggedOutPlayerTableHandle } from "./logged_out_player_table.ts";
export { LoggedOutPlayerTableHandle };
import { PlayerTableHandle } from "./player_table.ts";
export { PlayerTableHandle };
import { UpdatePlayerScheduleTableHandle } from "./update_player_schedule_table.ts";
export { UpdatePlayerScheduleTableHandle };

// Import and reexport all types
import { DbInputState } from "./db_input_state_type.ts";
export { DbInputState };
import { DbVector2 } from "./db_vector_2_type.ts";
export { DbVector2 };
import { InputKind } from "./input_kind_type.ts";
export { InputKind };
import { Player } from "./player_type.ts";
export { Player };
import { UpdatePlayerSchedule } from "./update_player_schedule_type.ts";
export { UpdatePlayerSchedule };

const REMOTE_MODULE = {
  tables: {
    logged_out_player: {
      tableName: "logged_out_player",
      rowType: Player.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
    },
    player: {
      tableName: "player",
      rowType: Player.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
    },
    update_player_schedule: {
      tableName: "update_player_schedule",
      rowType: UpdatePlayerSchedule.getTypeScriptAlgebraicType(),
      primaryKey: "scheduled_id",
    },
  },
  reducers: {
    connect: {
      reducerName: "connect",
      argsType: Connect.getTypeScriptAlgebraicType(),
    },
    disconnect: {
      reducerName: "disconnect",
      argsType: Disconnect.getTypeScriptAlgebraicType(),
    },
    update_player_animation_state: {
      reducerName: "update_player_animation_state",
      argsType: UpdatePlayerAnimationState.getTypeScriptAlgebraicType(),
    },
    update_player_movement: {
      reducerName: "update_player_movement",
      argsType: UpdatePlayerMovement.getTypeScriptAlgebraicType(),
    },
    update_player_rotation: {
      reducerName: "update_player_rotation",
      argsType: UpdatePlayerRotation.getTypeScriptAlgebraicType(),
    },
    update_player_scheduled: {
      reducerName: "update_player_scheduled",
      argsType: UpdatePlayerScheduled.getTypeScriptAlgebraicType(),
    },
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "Connect", args: Connect }
| { name: "Disconnect", args: Disconnect }
| { name: "UpdatePlayerAnimationState", args: UpdatePlayerAnimationState }
| { name: "UpdatePlayerMovement", args: UpdatePlayerMovement }
| { name: "UpdatePlayerRotation", args: UpdatePlayerRotation }
| { name: "UpdatePlayerScheduled", args: UpdatePlayerScheduled }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  onConnect(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("connect", callback);
  }

  removeOnConnect(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("connect", callback);
  }

  onDisconnect(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("disconnect", callback);
  }

  removeOnDisconnect(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("disconnect", callback);
  }

  updatePlayerAnimationState(animationState: string) {
    const __args = { animationState };
    let __writer = new BinaryWriter(1024);
    UpdatePlayerAnimationState.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("update_player_animation_state", __argsBuffer, this.setCallReducerFlags.updatePlayerAnimationStateFlags);
  }

  onUpdatePlayerAnimationState(callback: (ctx: ReducerEventContext, animationState: string) => void) {
    this.connection.onReducer("update_player_animation_state", callback);
  }

  removeOnUpdatePlayerAnimationState(callback: (ctx: ReducerEventContext, animationState: string) => void) {
    this.connection.offReducer("update_player_animation_state", callback);
  }

  updatePlayerMovement(kind: InputKind, enabled: boolean) {
    const __args = { kind, enabled };
    let __writer = new BinaryWriter(1024);
    UpdatePlayerMovement.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("update_player_movement", __argsBuffer, this.setCallReducerFlags.updatePlayerMovementFlags);
  }

  onUpdatePlayerMovement(callback: (ctx: ReducerEventContext, kind: InputKind, enabled: boolean) => void) {
    this.connection.onReducer("update_player_movement", callback);
  }

  removeOnUpdatePlayerMovement(callback: (ctx: ReducerEventContext, kind: InputKind, enabled: boolean) => void) {
    this.connection.offReducer("update_player_movement", callback);
  }

  updatePlayerRotation(rotation: number) {
    const __args = { rotation };
    let __writer = new BinaryWriter(1024);
    UpdatePlayerRotation.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("update_player_rotation", __argsBuffer, this.setCallReducerFlags.updatePlayerRotationFlags);
  }

  onUpdatePlayerRotation(callback: (ctx: ReducerEventContext, rotation: number) => void) {
    this.connection.onReducer("update_player_rotation", callback);
  }

  removeOnUpdatePlayerRotation(callback: (ctx: ReducerEventContext, rotation: number) => void) {
    this.connection.offReducer("update_player_rotation", callback);
  }

  updatePlayerScheduled(args: UpdatePlayerSchedule) {
    const __args = { args };
    let __writer = new BinaryWriter(1024);
    UpdatePlayerScheduled.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("update_player_scheduled", __argsBuffer, this.setCallReducerFlags.updatePlayerScheduledFlags);
  }

  onUpdatePlayerScheduled(callback: (ctx: ReducerEventContext, args: UpdatePlayerSchedule) => void) {
    this.connection.onReducer("update_player_scheduled", callback);
  }

  removeOnUpdatePlayerScheduled(callback: (ctx: ReducerEventContext, args: UpdatePlayerSchedule) => void) {
    this.connection.offReducer("update_player_scheduled", callback);
  }

}

export class SetReducerFlags {
  updatePlayerAnimationStateFlags: CallReducerFlags = 'FullUpdate';
  updatePlayerAnimationState(flags: CallReducerFlags) {
    this.updatePlayerAnimationStateFlags = flags;
  }

  updatePlayerMovementFlags: CallReducerFlags = 'FullUpdate';
  updatePlayerMovement(flags: CallReducerFlags) {
    this.updatePlayerMovementFlags = flags;
  }

  updatePlayerRotationFlags: CallReducerFlags = 'FullUpdate';
  updatePlayerRotation(flags: CallReducerFlags) {
    this.updatePlayerRotationFlags = flags;
  }

  updatePlayerScheduledFlags: CallReducerFlags = 'FullUpdate';
  updatePlayerScheduled(flags: CallReducerFlags) {
    this.updatePlayerScheduledFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get loggedOutPlayer(): LoggedOutPlayerTableHandle {
    return new LoggedOutPlayerTableHandle(this.connection.clientCache.getOrCreateTable<Player>(REMOTE_MODULE.tables.logged_out_player));
  }

  get player(): PlayerTableHandle {
    return new PlayerTableHandle(this.connection.clientCache.getOrCreateTable<Player>(REMOTE_MODULE.tables.player));
  }

  get updatePlayerSchedule(): UpdatePlayerScheduleTableHandle {
    return new UpdatePlayerScheduleTableHandle(this.connection.clientCache.getOrCreateTable<UpdatePlayerSchedule>(REMOTE_MODULE.tables.update_player_schedule));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
